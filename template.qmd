---
title: "Lab 06"
subtitle: "$K$NN and PCA"
jupyter: julia-1.9
date: 2023-10-13
author: Riley Becker (rb111)
---

# 1. Intro
```{julia}
import Pkg; Pkg.add("MultivariateStats")
import Pkg; Pkg.add("Plots")
import Pkg; Pkg.add("NCDatasets")
import Pkg; Pkg.add("StatsBase")
import Pkg; Pkg.add("Unitful")
```
```{julia}
import Pkg; Pkg.add("DataFrames")
```
```{julia}
using Dates
using MultivariateStats
using Plots
using NCDatasets
using StatsBase
using Unitful
using DataFrames
Plots.default(; margin=4Plots.mm, size=(700, 400), linewidth=2)
```

# 2. Data
## 2a. Precipitation Data
```{julia}
precip_ds = NCDataset("data/raw/precip_tx.nc")
```
```{julia}
# Here, I'm creating variables from the precip_tx.nc dataset.
precip_time = precip_ds["time"][:] 
precip_lon = precip_ds["lon"][:]
precip_lat = precip_ds["lat"][:]
precip_lat = reverse(precip_lat) #The latitude needs to be reversed
precip = (precip_ds["precip"][:, :, :])
precip = reverse(precip, dims=2) #Because we reversed the latitude, we need to do the same in the second dimension of the precipitation data
```
```{julia}
# It is evident that the precipitation data is in millimeters, so I'm adding in units.
precip = precip.* 1u"mm"
```

```{julia}
close(precip_ds)
```

```{julia}
years 2001:2010

var_data_list = []
time_data_list = []
lon_data_list = []
lat_data_list = []

 for year in years
        # Download 2m air temperature for the year 2020
       temporary_Variable = NCDataset(joinpath(data_dir, "2m_temperature_$year.nc"))
       temp_values = temporary_Variable["t2m"][:,:,:]
       
       accumulator = concatonate(accumulator,temp_values,dims = 3)
       close(temparary_Variable)
end


```

## 2b. Temperature Data
```{julia}
# ADD IN NOTES HERE
temp_time = t2m["time"]
temp_time = temp_time[1:392737]
```

```{julia}
temp_lon = t2m["longitude"]
```
```{julia}
temp_lat = t2m["latitude"]
temp_lat = reverse(temp_lat)
```
```{julia}
temp = t2m["t2m"]
```
```{julia}
temp = temp .* 1u"K"
```
```{julia}
temp_lat_matrix = hcat(temp_lat)
```
```{julia}
temp_time_matrix = hcat(temp_time)
```
```{julia}
temp_lon_matrix = hcat(temp_lon)
```
```{julia}
temp_t2m_matrix = hcat(temp)
```
```{julia}
INSERT FUNCTION TO MAKE TEMP & PRECIP TIME THE SAME
```

# 3. Splitting Data
```{julia}
#ADD IN NOTES HERE
test_start_date = Date(2011, 1, 1) #CHANGE THIS
test_start_index = searchsortedfirst(time, test_start_date)
```
```{julia}
# Here I'm splitting my data into training & testing sets

precip_train = precip[:, :, 1:test_start_index - 1]

precip_test = precip[:, :, test_start_index:end]
```
```{julia}
temp_train = temp[:, :, 1:test_start_index - 1]

temp_test = temp[:, :, test_start_index:end]
```
```{julia}
time_train = time[1:test_start_index - 1]
time_test = time[test_start_index:end]
```

# 4. Preprocessing
```{julia}

# ADD IN EXPLANATION AS TO WHAT IM PREPROCESSING & WHY
