---
title: "Project 1"
subtitle: Precipitation Downscaling
jupyter: julia-1.9
date: 2023-11-13
author: Riley Becker (rb111)
---

# 1. Intro
```{julia}
import Pkg; Pkg.add("MultivariateStats")
import Pkg; Pkg.add("Plots")
import Pkg; Pkg.add("NCDatasets")
import Pkg; Pkg.add("StatsBase")
import Pkg; Pkg.add("Unitful")
```
```{julia}
import Pkg; Pkg.add("DataFrames")
```
```{julia}
using Dates
using MultivariateStats
using Plots
using NCDatasets
using StatsBase
using Unitful
using DataFrames
Plots.default(; margin=4Plots.mm, size=(700, 400), linewidth=2)
```

# 2. Data
## 2a. Precipitation Data
```{julia}
precip_ds = NCDataset("data/raw/precip_tx.nc") #loading in the precip_tx.nc dataset
```
```{julia}
# Here, I'm creating variables from the precip_tx.nc dataset.
precip_time = precip_ds["time"][732:end]
precip_time = Date.(precip_time)
precip_lon = precip_ds["lon"][:]
precip_lat = precip_ds["lat"][:]
precip_lat = reverse(precip_lat) #The latitude needs to be reversed.
precip = (precip_ds["precip"][:, :, 732:end])*.1u"mm" #this precipitation data is in millimeters, so I'm adding in units.
precip = reverse(precip, dims=2) #Because we reversed the latitude, we need to do the same in the second dimension of the precipitation data.
```
```{julia}
close(precip_ds) #closing the dataset
```



## 2b. Temperature Data


### Loading in Temperature Data Year by Year

```{julia}
temp10_ds = NCDataset("data/raw/2m_temperature_2010.nc") 
```
```{julia}
# Here, I'm creating variables from the 2m_temperature_2010.nc dataset.
temp10_time = temp10_ds["time"]
temp10_time = Date.(temp10_time)
temp10_lon = temp10_ds["longitude"][:]
temp10_lat = temp10_ds["latitude"][:]
temp10_lat = reverse(temp10_lat) #The latitude needs to be reversed.
temp10 = (temp10_ds["t2m"][:, :,:])*.1u"K" #this temp data is in Kelvin, so I'm adding in units.
temp10 = reverse(temp10, dims=2) #Because we reversed the latitude, we need to do the same in the second dimension of the temperature data.
```
```{julia}
close(temp10_ds)
```

### Repeating this step for temp datasets from 2011 to 2020
```{julia}
temp11_ds = NCDataset("data/raw/2m_temperature_2011.nc") 
```
```{julia}

temp11_time = temp11_ds["time"]
temp11_time = Date.(temp11_time)
temp11_lon = temp11_ds["longitude"][:]
temp11_lat = temp11_ds["latitude"][:]
temp11_lat = reverse(temp11_lat) 
temp11 = (temp11_ds["t2m"][:, :,:])*.1u"K" 
temp11 = reverse(temp11, dims=2)
```
```{julia}
close(temp11_ds)
```


```{julia}
temp12_ds = NCDataset("data/raw/2m_temperature_2012.nc") 
```
```{julia}
temp12_time = temp12_ds["time"]
temp12_time = Date.(temp12_time)
temp12_lon = temp12_ds["longitude"][:]
temp12_lat = temp12_ds["latitude"][:]
temp12_lat = reverse(temp12_lat) 
temp12 = (temp12_ds["t2m"][:, :,:])*.1u"K" 
temp12 = reverse(temp12, dims=2) 
```
```{julia}
close(temp12_ds)
```


```{julia}
temp13_ds = NCDataset("data/raw/2m_temperature_2013.nc") 
```
```{julia}

temp13_time = temp13_ds["time"]
temp13_time = Date.(temp13_time)
temp13_lon = temp13_ds["longitude"][:]
temp13_lat = temp13_ds["latitude"][:]
temp13_lat = reverse(temp13_lat)
temp13 = (temp13_ds["t2m"][:, :,:])*.1u"K" 
temp13 = reverse(temp13, dims=2)
```
```{julia}
close(temp13_ds)
```


```{julia}
temp14_ds = NCDataset("data/raw/2m_temperature_2014.nc") 
```
```{julia}
temp14_time = temp14_ds["time"]
temp14_time = Date.(temp14_time)
temp14_lon = temp14_ds["longitude"][:]
temp14_lat = temp14_ds["latitude"][:]
temp14_lat = reverse(temp14_lat) 
temp14 = (temp14_ds["t2m"][:, :,:])*.1u"K" 
temp14 = reverse(temp14, dims=2) 
```
```{julia}
close(temp14_ds)
```


```{julia}
temp15_ds = NCDataset("data/raw/2m_temperature_2015.nc") 
```
```{julia}
temp15_time = temp15_ds["time"]
temp15_time = Date.(temp15_time)
temp15_lon = temp15_ds["longitude"][:]
temp15_lat = temp15_ds["latitude"][:]
temp15_lat = reverse(temp15_lat) 
temp15 = (temp15_ds["t2m"][:, :,:])*.1u"K" 
temp15 = reverse(temp15, dims=2) 
```
```{julia}
close(temp15_ds)
```


```{julia}
temp16_ds = NCDataset("data/raw/2m_temperature_2016.nc") 
```
```{julia}

temp16_time = temp16_ds["time"]
temp16_time = Date.(temp16_time)
temp16_lon = temp16_ds["longitude"][:]
temp16_lat = temp16_ds["latitude"][:]
temp16_lat = reverse(temp16_lat) 
temp16 = (temp16_ds["t2m"][:, :,:])*.1u"K" 
temp16 = reverse(temp16, dims=2) 
```
```{julia}
close(temp16_ds)
```

```{julia}
temp17_ds = NCDataset("data/raw/2m_temperature_2017.nc") 
```
```{julia}

temp17_time = temp17_ds["time"]
temp17_time = Date.(temp17_time)
temp17_lon = temp17_ds["longitude"][:]
temp17_lat = temp17_ds["latitude"][:]
temp17_lat = reverse(temp17_lat) 
temp17 = (temp17_ds["t2m"][:, :,:])*.1u"K" 
temp17 = reverse(temp17, dims=2)
```
```{julia}
close(temp17_ds)
```


```{julia}
temp18_ds = NCDataset("data/raw/2m_temperature_2018.nc") 
```
```{julia}
temp18_time = temp18_ds["time"]
temp18_time = Date.(temp18_time)
temp18_lon = temp18_ds["longitude"][:]
temp18_lat = temp18_ds["latitude"][:]
temp18_lat = reverse(temp18_lat) 
temp18 = (temp18_ds["t2m"][:, :,:])*.1u"K" 
temp18 = reverse(temp18, dims=2)
```
```{julia}
close(temp18_ds)
```

```{julia}
temp19_ds = NCDataset("data/raw/2m_temperature_2019.nc") 
```
```{julia}
temp19_time = temp19_ds["time"]
temp19_time = Date.(temp19_time)
temp19_lon = temp19_ds["longitude"][:]
temp19_lat = temp19_ds["latitude"][:]
temp19_lat = reverse(temp19_lat)
temp19 = (temp19_ds["t2m"][:, :,:])*.1u"K" 
temp19 = reverse(temp19, dims=2)
```
```{julia}
close(temp19_ds)
```


```{julia}
temp20_ds = NCDataset("data/raw/2m_temperature_2020.nc") 
```
```{julia}

temp20_time = temp20_ds["time"]
temp20_time = Date.(temp20_time)
temp20_lon = temp20_ds["longitude"][:]
temp20_lat = temp20_ds["latitude"][:]
temp20_lat = reverse(temp20_lat) 
temp20 = (temp20_ds["t2m"][:, :,:])*.1u"K" 
temp20 = reverse(temp20, dims=2)
```
```{julia}
close(temp20_ds)
```
### Creating One Large Dataset That Combines all Temp Datasets
```{julia}
# Function to load and process temperature data for a specific year
function load_and_process_temperature_data(year)
    ds = NCDataset("data/raw/2m_temperature_$(year).nc")
    time = Date.(ds["time"])
    lon = ds["longitude"][:]
    lat = reverse(ds["latitude"][:])
    temp = (ds["t2m"][:, :, :]) * 0.1u"K"
    temp = reverse(temp, dims=2)
    close(ds)
    return time, lon, lat, temp
end

# Combine data for each year into one large dataset
function create_combined_dataset(years)
    all_time = []
    all_lon = []
    all_lat = []
    all_temp = []

    for year in years
        time, lon, lat, temp = load_and_process_temperature_data(year)
        append!(all_time, time)
        append!(all_lon, lon)
        append!(all_lat, lat)
        append!(all_temp, temp)
    end

    combined_dataset = CombinedDataset(
        convert(Vector{Date}, all_time),
        convert(Vector{Float64}, all_lon),
        convert(Vector{Float64}, all_lat),
        convert(Vector{Float64}, all_temp)
    )

    return combined_dataset
end
```
```{julia}
# Specify the years for which you want to create the combined dataset
years = 2010:2020

# Create the combined dataset
combined_dataset = create_combined_dataset(years)
```

### Temperature Variables

```{julia}
temp_lat = reverse(daily_t2m["latitude"])
temp_lon = daily_t2m["longitude"]
temp_time = daily_t2m["time"][732:16365]
temp = daily_t2m["t2m"][732:16365]
```

```{julia}
@assert temp_time == precip_time
```
```{julia}
time = Date.(precip_time)
```

# 3. Splitting Data
```{julia}
#ADD IN NOTES HERE
test_start_date = Date(2010, 12, 18) #CHANGE THIS
test_start_index = searchsortedfirst(time, test_start_date)
```
```{julia}
# Here I'm splitting my data into training & testing sets

precip_train = precip[:, :, 1:test_start_index - 1]

precip_test = precip[:, :, test_start_index:end]
```
```{julia}
temp_train = temp[1:test_start_index - 1]

temp_test = temp[test_start_index:end]
```
```{julia}
time_train = time[1:test_start_index - 1]
time_test = time[test_start_index:end]
```

# 4. Preprocessing
```{julia}

# ADD IN EXPLANATION AS TO WHAT IM PREPROCESSING & WHY
